import heapq

def dijkstra(graph, start, end):
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    previous_nodes = {node: None for node in graph}
    priority_queue = [(0, start)]

    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)

        if current_distance > distances[current_node]:
            continue

        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                previous_nodes[neighbor] = current_node
                heapq.heappush(priority_queue, (distance, neighbor))

    if distances[end] == float('inf'):
        return "There is no such path."

    path = []
    current = end
    while current is not None:
        path.insert(0, current)
        current = previous_nodes[current]

    return distances[end], path

# Parse input
e = int(input())
graph = {}
for _ in range(e):
    start, end, weight = map(int, input().split(', '))
    if start not in graph:
        graph[start] = {}
    if end not in graph:
        graph[end] = {}
    graph[start][end] = weight
    graph[end][start] = weight

start_node = int(input())
end_node = int(input())

# Calculate shortest path
result = dijkstra(graph, start_node, end_node)

# Print output
if isinstance(result, tuple):
    distance, path = result
    print(distance)
    print(' '.join(map(str, path)))
else:
    print(result)
